@startuml parisportif5
skinparam linetype ortho
'plantuml
'Relations :
    'Un utilisateur a une langue sélectionnée
    User "0..*" --> "1" Language
    'Une facture n'est pas pas forcément lié à un utilisateur existant
    User "0..1" <-- "0..*" Billing
    'Un paris a un type
    BetCategory "1" <-- "0..*" Bet
    'Un utilisateur a un porte-feuille
    User "1" -- "1" Wallet
    'Un utilisateur a des paris
    User "1" o-- "0..*" Bet
    'La compétition a une équipe gagnante
    Competition "0..*" --> "0..1" Team
    'Une compétition a plusieurs rencontre ou course
    Competition "1" o-- "0..*" Run
    'Une rencontre ou une course a un lieu
    Run "1" -- "1" Location
    'Une rencontre ou une course a plusieurs équipes
    Run "1" o--> "0..*" Team
    'Une équipe a plusieurs membre
    Team "1" *-- "1..*" Member
    'Une compétition a un sport
    Sport "1" <-- "0..*" Competition
    Result "0..*" -- "0..1" Run
    Result "0..*" --> "0..1" Team
    Result "0..*" --> "0..1" Member
    Result "0..1" -- "0..1" Competition
    BetCategory "1" <-- "0..*" Result
    BetCategory "1..*" <-- "0..*" Competition
    Sport "1" <-- "0..*" Team
    'Un membre a un rôle (fonction) tel que pilote, joueur
    MemberRole "1" <-- "0..*" Member
    'Un membre a un status (blessé, titulaire)
    MemberStatus "1" <-- "0..*" Member
    'Liaison potentiel entre un paris et une compétition
    Bet "0..*" --> "1" Competition
    'Liaison potentiel entre un paris et une rencontre ou course
    Bet "0..*" --> "0..1" Run
    'Liaison potentiel entre un paris et une équipe
    Bet "0..*" --> "0..1" Team
    'Liaison potentiel entre un paris et un membre
    Bet "0..*" --> "0..1" Member
    'Implémentation de l'interface FundStorageInterface par l'entité Billing
    FundStorageInterface <|.. Billing
    'Implémentation de l'interface FundStorageInterface par l'entité Wallet
    FundStorageInterface <|.. Wallet
    'Implémentation de l'interface FundStorageInterface par l'entité Bet
    FundStorageInterface <|.. Bet
'Définitions des classes :
    'Pour convertir le montant enregistré dans la bdd en unité monétaire et vice versa
    interface FundStorageInterface {
        +convertToCurrencyUnit(in int amount) : float
        +convertCurrencyUnitToStoredData(in float amount) : int
    }
    'Rôle du membre (pilote, co-pilote, joueur)
    class MemberRole {
        -identifier : int
        -name : string
    }
    'Statut du membre (blessé, remplaçant, titulaire)
    class MemberStatus {
        -identifier : int
        -name : string
    }
    'Porte-feuille de l'utilisateur avec des fonds (de l'argent gagnés)
    class Wallet {
        -identifier : int
        -amount : int
        +add(in float value) : void
        +subtract(in float value) : void
        +isEmpty() : bool
        +isAuthorizedSubtraction(in float value) : bool
    }
    'Utilisateur avec un compte
    class User {
        -id : int
        -email : string
        -password : string
        -roles : string[]
        -activatedStatus : bool
        -activatedDate : DateTime
        -suspendedStatus : bool
        -suspendedDate : DateTime
        -deletedStatus : bool
        -deletedDate : DateTime
        -civility : string
        -firstName : string
        -lastName : string
        -billingAddress : string
        -billingCity : string
        -billingPostcode : string
        -billingCountry : string
        -birthDate : DateTime
        -timeZoneSelected : string
        +{static} MIN_AGE_FOR_BETTING : int = 18
        +{static} MAX_AGE_FOR_BETTING : int = 140
        +{static} STORED_TIME_ZONE : string = 'UTC'
        +{static} SELECT_CURRENCY_CODE : string = "EUR"
        +{static} SELECT_CURRENCY_SYMBOL : string = "€"
        +getName() : string
        +getAddress() : string
        +isPasswordSafe() : bool
        +getSalt() : string|null
        +eraseCredentials() : void
        +delete() : bool
        +restore() : bool
        +suspend() : bool
        +valid() : bool
        +activate() : bool
        +desactivate() : bool
        +cancelBet(in Bet bet) : void
    }
    'Langue d'affichage de l'utilisateur
    class Language {
        -identifier : int
        -name : string
        -country : string
        -code : string
        -dateFormat : string
        -timeFormat : string
        -timeZone : string
        +isValidDateTimeFormat() : bool
        +getDateTimeFormat() : string|null
    }
    'Factures (type=débit ou crédit)
    class Billing {
        -identifier : int
        -firstName : string
        -lastName : string
        -address : string
        -city : string
        -postcode : string
        -country : string
        -designation : string
        -orderNumber : int
        -invoiceNumber : int
        -amount : int
        -commissionRate : int
        -operationType : string
        -issueDate : DateTime
        -deliveryDate : DateTime
        +{static} DEFAULT_COMMISSION_RATE : float =  7.5
        +{static} DEFAULT_CURRENCY_CODE : string = "EUR"
        +{static} DEFAULT_CURRENCY_SYMBOL : string = "€"
        +getName() : string
        +getAddress() : string
        +deleteUser() : void
        +convertToCommissionRate(in int commissionRate) : float
        +convertCommissionRateToStoredData(in float commissionRate) : int
        +hasUser() : bool
    }
    'Un paris
    class Bet {
        -identifier : int
        -designation : string
        -amount : int
        -odds : int
        -isWinning : bool|null
        +hasWon() : bool|null
        +won() : void
        +lost() : void
        +restoreWithoutResult() : void
        +convertToOddsMultiplier(in int odds) : float
        +convertOddsMultiplierToStoredData(in float odds) : int
        +getTarget() : Member|Team|Run|Competition
    }
    'Catégorie de paris (ex: Paris sur le résultat)
    class BetCategory {
        -identifier : int
        -name : string
        -description : string
    }
    'Lieu de la rencontre/course
    class Location {
        -identifier : int
        -place : string
        -timezone : string
        -country : string
    }
    'Sport pratiqué (runtype = fixture(match), race(course)) (type = collectif ou individuel ou les deux)
    class Sport {
        -identifier : int
        -name : string
        -maxTeamsByRun : int|null
        -maxMembersByTeam : int|null
        -minTeamsByRun : int
        -minMembersByTeam : int
        -collectiveType : bool
        -individualType : bool
        -country : string
        -runType : string
        +isCollective() : bool
        +isIndividual() : bool
        +isBothIndividualAndCollective() : bool
    }
    'Compétition (JO, Ligue des Champions, F1 Championnat du monde)
    class Competition {
        -identifier : int
        -name : string
        -startDate : DateTime
        -endDate : DateTime
        -country : string
        -maxRuns : int|null
        -minRuns : int
        -result : Result
        +hasResult() : bool
        +hasRuns() : bool
        +isFinish() : bool
        +isOngoing() : bool
        +getEventsCount() : int
        +getRunsCount() : int
        +hasRequiredNumberOfRuns() : bool
    }
    'Un match, une rencontre, une course
    class Run {
        -identifier : int
        -event : string
        -name : string
        -startDate : DateTime
        -endDate : DateTime
        -noWinner : bool
        -scores : Result[]
        +isFinish() : bool
        +isOngoing() : bool
        +hasTeams() : bool
        +hasResult() : bool
        +getTeamsCount() : int
        +hasRequiredNumberOfTeams() : bool
    }
    'Résultat du match ou de la course
    class Result {
        -identifier : int
        -type : string
        -value : int
        -winner : bool
    }
    'Joueur ou sportif ou pilote
    class Member {
        -identifier : int
        -lastName : string
        -firstName : string
        -country : string
    }
    'Équipes qui participe à une rencontre, à une course
    class Team {
        -identifier : int
        -name : string
        -country : string
        +hasMembers() : bool
        +getMembersCount() : int
        +getScoresCount() : int
        +hasRequiredNumberOfMembers() : bool
    }
@enduml
