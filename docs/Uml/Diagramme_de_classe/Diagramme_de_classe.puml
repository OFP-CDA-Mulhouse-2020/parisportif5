@startuml parisportif5
skinparam linetype ortho
'plantuml
'Relations :
    'Un utilisateur a une liste des paris qu'il a fait
    User "1" <-- "0..*" BetSaved
    'Un utilisateur a une langue sélectionnée
    User "0..*" --> "1" Language
    'Une facture n'est pas pas forcément lié à un utilisateur existant
    User "0..1" <-- "0..*" Billing
    'Un paris a un type
    BetCategory "1" <-- "0..*" Bet
    'Un utilisateur a un porte-feuille
    User "1" -- "1" Wallet
    'Un utilisateur a des paris
    User "1" o-- "0..*" Bet
    'La compétition a une équipe gagnante
    Competition "0..*" --> "0..1" Team
    'Une compétition a plusieurs rencontre ou course
    Competition "1" o-- "0..*" Run
    'Une rencontre ou une course a un lieu
    Run "0..*" --> "1" Location
    'Une rencontre ou une course a plusieurs équipes
    Run "1" o--> "0..*" Team
    'Une équipe a plusieurs membre
    Team "1" *-- "1..*" Member
    'Une compétition a un sport
    Sport "1" <-- "0..*" Competition
    'Une compétition a une liste de catégorie de paris
    BetCategory "1..*" <-- "0..*" Competition
    'Une équipe a un sport
    Sport "1" <-- "0..*" Team
    'Un membre a un rôle (fonction) tel que pilote, joueur
    MemberRole "1" <-- "0..*" Member
    'Un membre a un status (blessé, titulaire)
    MemberStatus "1" <-- "0..*" Member
    'Liaison potentiel entre un paris et une compétition
    Bet "0..*" --> "1" Competition
    'Liaison potentiel entre un paris et une rencontre ou course
    Bet "0..*" --> "0..1" Run
    'Liaison potentiel entre un paris et une équipe
    Bet "0..*" --> "0..1" Team
    'Liaison potentiel entre un paris et un membre
    Bet "0..*" --> "0..1" Member
    'Implémentation de l'interface FundsStorageInterface par la classe FundsStorageDataConverter
    FundsStorageInterface <|.. FundsStorageDataConverter
    'Implémentation de l'interface CommissionRateStorageInterface par la classe CommissionRateStorageDataConverter
    CommissionRateStorageInterface <|.. CommissionRateStorageDataConverter
    'Implémentation de l'interface OddsStorageInterface par la classe OddsStorageDataConverter
    OddsStorageInterface <|.. OddsStorageDataConverter
    'Implémentation de l'interface FundsStorageInterface par la classe StorageDataConverter
    FundsStorageInterface <|.. StorageDataConverter
    'Implémentation de l'interface CommissionRateStorageInterface par la classe StorageDataConverter
    CommissionRateStorageInterface <|.. StorageDataConverter
    'Implémentation de l'interface OddsStorageInterface par la classe StorageDataConverter
    OddsStorageInterface <|.. StorageDataConverter
    'Implémentation de l'interface DateTimeStorageInterface par la classe abstraite AbstactEntity
    DateTimeStorageInterface <|.. AbstactEntity
    '
    AbstactEntity <|-- Bet
    AbstactEntity <|-- Competition
    AbstactEntity <|-- Run
    AbstactEntity <|-- Billing
    AbstactEntity <|-- User
    AbstactEntity <|-- BetSaved
    AbstactEntity <|-- MemberRole
    AbstactEntity <|-- MemberStatus
    AbstactEntity <|-- Member
    AbstactEntity <|-- Wallet
    AbstactEntity <|-- Team
    AbstactEntity <|-- Language
    AbstactEntity <|-- Location
    AbstactEntity <|-- Sport
    AbstactEntity <|-- BetCategory
'Définitions des classes :
    'Pour convertir le montant enregistré dans la BDD en unité monétaire et vice versa
    interface FundsStorageInterface {
        +convertToCurrencyUnit(in int amount) : float
        +convertCurrencyUnitToStoredData(in float amount) : int
    }
    'Pour convertir le taux de commission enregistré dans la BDD en pourcentage et vice versa
    interface CommissionRateStorageInterface {
        +convertToCommissionRate(in int commissionRate) : float
        +convertCommissionRateToStoredData(in float commissionRate) : int
    }
    'Pour convertir la côte enregistré dans la BDD en float et vice versa
    interface OddsStorageInterface {
        +convertToOddsMultiplier(in int odds) : float
        +convertOddsMultiplierToStoredData(in float odds) : int
    }
    'Pour convertir la date et heure au format de la BDD
    interface DateTimeStorageInterface {
        +convertedToStoreDateTime(in DateTimeInterface datetime) : DateTimeImmutable
        +setStoredTimeZone(inout DateTimeImmutable datetimeImmutable) : DateTimeImmutable
    }
    abstract AbstactEntity {
        +{static} STORED_TIME_ZONE : string = 'UTC'
        +convertedToStoreDateTime(in DateTimeInterface datetime) : DateTimeImmutable
        +setStoredTimeZone(inout DateTimeImmutable datetimeImmutable) : DateTimeImmutable
    }
    'Liste des paris que les utilisateurs ont fait
    class BetSaved {
        -id : int
        -designation : string
        -amount : int
        -odds : int
        -gains : int
        -betDate : DateTimeImmutable
        -isWinning : bool|null
        -betCategoryName : string
        -competitionName : string
        -competitionStartDate : DateTimeImmutable
        -competitionCountry : string
        -competitionSportName : string
        -competitionSportCountry : string
        -runName : string|null = null
        -runEvent : string|null = null
        -runStartDate : DateTimeImmutable|null = null
        -teamName : string|null = null
        -teamCountry : string|null = null
        -memberLastName : string|null = null
        -memberFirstName : string|null = null
        -memberCountry : string|null = null
        +isWinning() : bool|null
        +getTargetName() : string
        +getSelectName() : string|null
    }
    'Rôle du membre (pilote, co-pilote, joueur)
    class MemberRole {
        -id : int
        -name : string
    }
    'Statut du membre (blessé, remplaçant, titulaire)
    class MemberStatus {
        -id : int
        -name : string
    }
    'Porte-feuille de l'utilisateur avec des fonds (de l'argent gagnés)
    class Wallet {
        -id : int
        -amount : int = 0
        +addAmount(in int amount) : void
        +subtractAmount(in int amount) : void
        +isEmpty() : bool
        +isValidSubtraction(in int amount) : bool
        +isValidAddition(in int amount) : bool
        +isValidOperation(in int amount) : bool
    }
    'Utilisateur avec un compte
    class User {
        -id : int
        -email : string
        -password : string
        -plainPassword : string|null = null
        -roles : string[] = []
        -activatedStatus : bool = true
        -activatedDate : DateTimeImmutable|null = new DateTimeImmutable
        -suspendedStatus : bool = true
        -suspendedDate : DateTimeImmutable|null = new DateTimeImmutable
        -deletedStatus : bool = false
        -deletedDate : DateTimeImmutable|null = null
        -civility : string|null = null
        -firstName : string
        -lastName : string
        -billingAddress : string
        -billingCity : string
        -billingPostcode : string
        -billingCountry : string
        -birthDate : DateTimeImmutable
        -timeZoneSelected : string
        -isVerified : bool = false
        -newsletters : bool = false
        -identityDocument : string
        -residenceProof : string
        +{static} MIN_AGE_FOR_BETTING : int = 18
        +{static} MAX_AGE_FOR_BETTING : int = 140
        +{static} SELECT_CURRENCY_CODE : string = "EUR"
        +{static} SELECT_CURRENCY_SYMBOL : string = "€"
        +getFullName() : string
        +getFullAddress() : string
        +isPasswordSafe() : bool
        +getUsername() : string
        +getSalt() : string|null
        +eraseCredentials() : void
        +delete() : bool
        +restore() : bool
        +suspend() : bool
        +valid() : bool
        +isVerified() : bool
        +isAdmin() : bool
    }
    'Langue d'affichage de l'utilisateur
    class Language {
        -id : int
        -name : string
        -country : string
        -code : string
        -dateFormat : string
        -timeFormat : string
        -capitalTimeZone : string
        +getDateTimeFormat() : string|null
    }
    'Factures (type=débit ou crédit)
    class Billing {
        -id : int
        -firstName : string
        -lastName : string
        -address : string
        -city : string
        -postcode : string
        -country : string
        -designation : string
        -orderNumber : int
        -invoiceNumber : int
        -amount : int
        -commissionRate : int
        -operationType : string
        -issueDate : DateTimeImmutable
        -deliveryDate : DateTimeImmutable
        +{static} DEFAULT_COMMISSION_RATE : float =  7.5
        +{static} DEFAULT_CURRENCY_CODE : string = "EUR"
        +{static} DEFAULT_CURRENCY_SYMBOL : string = "€"
        +{static} DEBIT : string = "debit"
        +{static} CREDIT : string = "credit"
        +{static} OPERATION_TYPES : string[] = [DEBIT, CREDIT]
        +getFullName() : string
        +getFullAddress() : string
        +deleteUser() : void
        +hasUser() : bool
    }
    'Un paris
    class Bet {
        -id : int
        -designation : string
        -amount : int
        -odds : int
        -betDate : DateTimeImmutable
        -isWinning : bool|null = null
        +isWinning() : bool|null
        +won() : void
        +lost() : void
        +restoreWithoutResult() : void
        +getTarget() : Run|Competition
        +getSelect() : Member|Team
    }
    'Catégorie de paris (ex: Paris sur le résultat)
    class BetCategory {
        -id : int
        -name : string
        -allowDraw : bool
        -target : string
        -onCompetition : bool
        -description : string|null = null
        +{static} TEAM_TYPE : string = "teams"
        +{static} MEMBER_TYPE : string = "members"
        +{static} TARGET_TYPES : string[] = [TEAM_TYPE, MEMBER_TYPE]
    }
    'Lieu de la rencontre/course
    class Location {
        -id : int
        -place : string
        -timeZone : string
        -country : string
    }
    'Sport pratiqué (runtype = fixture(match), race(course)) (type = collectif ou individuel ou les deux)
    class Sport {
        -id : int
        -name : string
        -maxTeamsByRun : int|null = null
        -maxMembersByTeam : int|null = null
        -minTeamsByRun : int = 0
        -minMembersByTeam : int = 0
        -collectiveType : bool
        -individualType : bool
        -country : string
        -runType : string
        +{static} FIXTURE_TYPE : string = "fixture"
        +{static} RACE_TYPE : string = "race"
        +{static} RUN_TYPES : string[] = [FIXTURE_TYPE, RACE_TYPE]
        +isCollective() : bool
        +isIndividual() : bool
        +isBothIndividualAndCollective() : bool
    }
    'Compétition (JO, Ligue des Champions, F1 Championnat du monde)
    class Competition {
        -id : int
        -name : string
        -startDate : DateTimeImmutable
        -country : string
        -maxRuns : int|null = null
        -minRuns : int = 0
        +hasRuns() : bool
        +canBet() : bool
        +getEventsCount() : int
        +getRunsCount() : int
        +hasRequiredNumberOfRuns() : bool
        +getTeams() : Team[]
        +getBetCategoriesForCompetition : BetCategory[]
        +getBetCategoriesForRun() : BetCategory[]
    }
    'Un match, une rencontre, une course
    class Run {
        -id : int
        -event : string
        -name : string
        -startDate : DateTimeImmutable
        +canBet() : bool
        +hasTeams() : bool
        +getTeamsCount() : int
        +hasRequiredNumberOfTeams() : bool
        +getBetCategories() : BetCategory[]
    }
    'Joueur ou sportif ou pilote
    class Member {
        -id : int
        -lastName : string
        -firstName : string
        -country : string
        -odds : int
        +getFullName() : string
    }
    'Équipes qui participe à une rencontre, à une course
    class Team {
        -id : int
        -name : string
        -country : string
        -odds : int
        +hasMembers() : bool
        +getMembersCount() : int
        +hasRequiredNumberOfMembers() : bool
    }
@enduml
