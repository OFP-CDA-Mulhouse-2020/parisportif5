# This is a basic workflow
name: code_checker

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  composer-caching:
    name: Mise en cache de composer

    runs-on: ubuntu-latest

    steps:

      - name: Checkout project
        uses: actions/checkout@v2

      - name: Validate composer.json and composer.lock
        run: composer validate
      
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer Downloads
        uses: actions/cache@v2
        with:
          path: vendor/
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        
      - name: Cache PHP dependencies
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
  
  code-check-tests:
    name: Tests de conformit√© du code

    needs: composer-caching

    runs-on: ubuntu-latest

    steps:

      - name: Checkout project
        uses: actions/checkout@v2

      - name: Install composer
        uses: php-actions/composer@v1
        with:
          php_version: 7.4
          composer_version: 1

      - name: Install php_codesniffer
        uses: hrysd/action-php_codesniffer@v1
        with:
          standard: PSR12
          target_directory: src
          
      - name: Run php_codesniffer
        run: ./vendor/bin/phpcs src --extensions=php --ignore=src/Kernel.php --report=code --colors --report-width=80 --standard=PSR12
        
  syntax-tests:
    name: Tests de syntaxe

    needs: composer-caching

    runs-on: ubuntu-latest

    steps:

      - name: Checkout project
        uses: actions/checkout@v2

      - name: Install composer
        uses: php-actions/composer@v1
        with:
          php_version: 7.4
          composer_version: 1
        
      - name: PHPStan
        uses: chindit/actions-phpstan@master
        with:
          # Arguments to add to PHPStan
          arguments: '-c phpstan.neon.dist --no-interaction --no-progress'

  unit-tests:
    name: Tests unitaires

    needs: composer-caching

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Install composer
        uses: php-actions/composer@v1
        with:
          php_version: 7.4
          composer_version: 1

      - name: Installs phpunit latest version
        uses: php-actions/phpunit@17-php-versions
        with:
          bootstrap: vendor/autoload.php
          configuration: tests/phpunit.xml.dist

      - name: Runs phpunit tests
        run: ./bin/phpunit --configuration 'tests/phpunit.xml.dist' --bootstrap 'vendor/autoload.php' --test-suffix 'Test.php,.phpt' tests
