@startuml parisportif5

'plantuml
'Relations :
    User --|> Account
    User "1" -- "1" Wallet
    User "1" -- "1" Cart
    User "1" -- "1" BillingHistory
    BillingHistory "1" o-- "0..*" Billing
    BetHistory "1" -- "1" User
    BetHistory "0..1" o--> "0..*" Bet
    BetCategory "1" <-- "0..*" Bet
    Cart "0..*" o--> "0..*" Bet

    BetCategory "0..*" <--o "0..*" Competition
    AbstractSport "1..*" <--* "0..*" Competition
    Country "1..*" <--* "0..*" Competition
    Competition "1" o-- "0..*" Event
    Event "1" o-- "0..*" AbstractRun
    AbstractRun "0..*" o--> "1" Location
    Team "1" o-- "0..*" AbstractScore
    AbstractRun "0..1" *--> "1..*" Team
    Team "1" o-- "0..*" Member
    Country "1" <--* "0..1" Team
    Competition "0..1" o--> "0..*" Team
    Event "0..1" o--> "0..*" Team
    Member "0..1" -- "0..*" AbstractScore
    AbstractSport "0..1" --> "1" Country
    Event "0..1" *--> "1..*" AbstractSport
    Team "0..*" --> "1" AbstractSport
    Member "0..*" *--> "1..*" AbstractSport
    Member "0..*" *--> "1..*" Country
    Location "0..*" --> "1" Country
    Member "0..*" <--o "0..*" AbstractRun

    AbstractRun <|-- Race
    AbstractRun <|-- Fixture
    CanBeBetInterface <|.. Competition
    CanBeBetInterface <|.. Event
    CanBeBetInterface <|.. AbstractRun
    CanBeBetInterface <|.. Team
    CanBeBetInterface <|.. Member
    PointScoreInterface <|.. PointScore
    TimeScoreInterface <|.. TimeScore
    TimeScore --|> AbstractScore
    PointScore --|> AbstractScore
    TimeScore ..|> ScoreInterface
    PointScore ..|> ScoreInterface

    Football ..|> SportInterface
    Football ..|> SportInterface
    Handball ..|> SportInterface
    Tennis ..|> SportInterface
    FormulaOne  ..|> SportInterface
    TableTennis ..|> SportInterface
    Football --|> AbstractSport
    Handball --|> AbstractSport
    Tennis --|> AbstractSport
    FormulaOne --|> AbstractSport
    TableTennis --|> AbstractSport
    Football ..|> CollectiveSportInterface
    Handball ..|> CollectiveSportInterface
    Tennis ..|> IndividualSportInterface
    FormulaOne  ..|> IndividualSportInterface
    TableTennis ..|> CollectiveSportInterface
    TableTennis ..|> IndividualSportInterface
    Fixture ..|> RunInterface
    Race ..|> RunInterface
'Définitions des classes :
    'interface de généralisation pour les classes autorisé à être parié
    interface CanBeBetInterface {
        +getOdds() : float
    }
    'Compte (sert à ce connecter)
    class Account {
        -identifier : int
        -validation : bool
        -password : string
        -emailAddress : string
        -status : AccountStatus
        -user : User
        +isValid() : bool
    }
    'Utilisateur avec un compte
    class User {
        -identifier : int
        -username : string
        -name : string
        -firstName : string
        -billingAddress : string
        -billingPostCode : string
        -billingCountry : string
        -birthDate : DateTime
        -mobile : string
        -account : Account
        -wallet : Wallet
        -cart : Cart
        -billingsHistory : BillingHistory
        -betsHistory : BetHistory
    }
    'Factures
    class Billing {
        -identifier : int
        -orderNumber  : int
        -amount : float
        -currency : string
        -user : User
        -bet : Bet
    }
    'Historique des factures
    class BillingHistory {
        -identifier
        -user : User
        -billings : Billing[*]
    }
    'Porte-feuille de l'utilisateur avec des fonds (de l'argent gagnés)
    class Wallet {
        -identifier : int
        -amount : float
        -currency : string
        -user : User
    }
    'Panier qui contient les paris sélectionnés
    class Cart {
        -identifier : int
        -user : User
        -bets : Bet[*]
    }
    'Un paris
    class Bet {
        -identifier : int
        -amount : float
        -state : BetState
        -type : BetType
        -user : User
        -billing : Billing
        -category : BetCategory
        -odds : float
        -items : CanBeBetInterface
    }
    'Historique des paris gagnés ou perdus
    class BetHistory {
        -identifier : int
        -user : User
        -bets : Bet[*]
    }
    'Catégorie de paris (ex: Paris sur la victoire du favoris)
    class BetCategory {
        -identifier : int
        -name : string
        -description : string
    }
    'Lieu de la rencontre/course
    class Location {
        -identifier : int
        -datetime : DateTime
        -timezoneLocal : DateTimeZone
        -country : Country
        -run : Run
    }
    'Sport pratiqué
    abstract class AbstractSport {
        #identifier : int
        #nameTranslate : string
        #competitorNumber : int
        #statutes : MemberStatus[*]
        #roles : MemberRole[*]
        #resultsType : ResultType[*]
        #country : Country
    }
    interface SportInterface {
        +getNameTranslate() : string
        +getClassName() : string
    }
    interface IndividualSportInterface {
        +isIndividual() : bool
    }
    interface CollectiveSportInterface {
        +isCollective() : bool
    }
    class Football {
        +getNameTranslate() : string
        +getClassName() : string
        +isCollective() : bool
    }
    class Handball {
        +getNameTranslate() : string
        +getClassName() : string
        +isCollective() : bool
    }
    class Tennis {
        +getNameTranslate() : string
        +getClassName() : string
        +isIndividual() : bool
    }
    class FormulaOne {
        +getNameTranslate() : string
        +getClassName() : string
        +isIndividual() : bool
    }
    class TableTennis {
        +getNameTranslate() : string
        +getClassName() : string
        +isCollective() : bool
        +isIndividual() : bool
    }
    'Pays du lieu de la rencontre/course
    class Country {
        -identifier : int
        -dateFormat : string
        -timeFormat : string
        -summerTimeOffset : int
        -TimeZones : DateTimeZone[*]
        +getIdentifier() : int
        +getDefaultTimeZone() : DateTimeZone
        +getTimeZone(in string timezone) : DateTimeZone
        +hasSummerTime() : bool
        +getDateFormat() : string
        +getTimeFormat() : string
        +getDateTimeFormat() : string
    }
    'Compétition (JO, Ligue des Champions, F1 Championnat du monde)
    class Competition {
        -identifier : int
        -name : string
        -beginAt : DateTime
        -endAt : DateTime
        -odds : float
        -sports : Sport[*]
        -betCategories : BetCategory[*]
        -teams : Team[*]
        -events : Event[*]
        -countries : Country[*]
        -result : ResultType
    }
    'Événement de la compétition (poul de qualification, Circuit F1 de france)
    class Event {
        -identifier : int
        -name : string
        -beginAt : DateTime
        -endAt : DateTime
        -odds : float
        -sports : Sport[*]
        -teams : Team[*]
        -runs : Run[*]
        -result : ResultType
    }
    'Course
    class Race {
        -identifier : int
    }
    'Rencontre
    class Fixture {
        -identifier : int
    }
    'interface pour Score en temps
    interface TimeScoreInterface {
        +getTime() : float
    }
    'interface pour Score en points
    interface PointScoreInterface {
        +getPoint() : int
    }
    'interface de généralisation pour un Score
    interface ScoreInterface {
        +getScore() : float
    }
    'Type de Score (par période, par match, par course, par saison pour team, par épreuve pour team)
    class ScoreType {
        -identifier : int
    }
    'Score de l'équipe ou du membre de l'équipe
    abstract class AbstractScore {
        #identifier : int
        #type : ScoreType
    }
    'Score en temps
    class TimeScore {
        #value : float
        +getTime() : float
        +getScore() : float
    }
    'Score en points
    class PointScore {
        #value : int
        +getPoint() : int
        +getScore() : float
    }
    'Joueur ou sportif ou pilote
    class Member {
        -identifier : int
        -name : string
        -firstName : string
        -runIdentification : string
        -status : MemberStatus
        -result : ResultType
        -role : MemberRole
        -odds : float
        -sports : Sport[*]
        -teams : Team[*]
        -scores : ScoreInterface[*]
        -countries : Country[*]
    }
    'Équipes qui participe à une rencontre, à une course
    class Team {
        -identifier : int
        -name : string
        -result : ResultType
        -odds : float
        -country : Country
        -sport : Sport
        -scores : ScoreInterface[*]
        -members : Member[*]
    }
    'Classe mère global : Un match, une rencontre, une course
    abstract class AbstractRun {
        #identifier : int
        #name : string
        #beginAt : DateTime
        #endAt : DateTime
        #odds : float
        #location : Location
        #teams : Team[*]
        #members : Member[*]
        #result : ResultType
    }
    'interface
    interface RunInterface

@enduml
