@startuml parisportif5

'plantuml
'Relations :
    User "1" -- "1" Wallet
    User "1" -- "1" Cart
    User "1" --> "1" Account
    'Account "1" -- "1" AccountStatus
    User "1" -- "1" BillingHistory
    BillingHistory "1" o-- "0..*" Billing
    Cart "0..*" o--> "0..*" Bet
    'Bet "0..1" --> "1" Payment
    BetCategory "0..*" <--o "0..*" Competition
    'Bet "0..*" --> "0..1" Competition
    'Bet "0..*" --> "0..1" Event
    'Bet "0..*" --> "0..1" AbstractRun
    'Bet "0..*" --> "0..1" Team
    'Bet "0..*" --> "0..1" Member
    Sport "1..*" <--* "0..*" Competition
    Country "1..*" <--* "0..*" Competition
    'Wallet "0..1" o--> "0..*" Payment
    Competition "1" o-- "0..*" Event
    Event "1" o-- "0..*" AbstractRun
    'AbstractRun "1" -- "1" RunStatus
    AbstractRun "0..*" o--> "1" Location
    Team "1" o-- "0..*" AbstractScore
    Period "0..1" -- "1" AbstractScore
    'Member "1" -- "0..1" Score
    AbstractRun "1" *-- "1..*" Period
    AbstractRun "0..1" *--> "1..*" Team
    Team "1" o-- "0..*" Member
    'Team "1" -- "1" TeamStatus
    'Member "1" -- "1" MemberStatus
    Country "1" <--* "0..1" Team
    Competition "0..1" o--> "0..*" Team
    Event "0..1" o--> "0..*" Team
    'Score "1" <-- "0..1" Team
    Member "0..1" -- "0..*" AbstractScore
    'Value "1" -- "1..*" Team
    'Value "1" -- "1..*" Member
    Sport "0..1" --> "1" Country
    Event "0..1" *--> "1..*" Sport
    Team "0..*" --> "1" Sport
    Member "0..*" *--> "1..*" Sport
    Member "0..*" *--> "1..*" Country
    User "0..*" *--> "1" Country
    Location "0..*" --> "1" Country
    BetCategory "1" <-- "0..*" Bet
    Member "0..*" <--o "0..*" AbstractRun
    BetHistory "1" -- "1" User
    BetHistory "0..1" o--> "0..*" Bet
    AbstractRun <|-- Race
    AbstractRun <|-- Fixture
    CanBeBetInterface <|.. Competition
    CanBeBetInterface <|.. Event
    CanBeBetInterface <|.. AbstractRun
    CanBeBetInterface <|.. Team
    CanBeBetInterface <|.. Member
    PointScoreInterface <|.. PointScore
    TimeScoreInterface <|.. TimeScore
    'TimeResult ..|> ResultInterface
    'PointResult ..|> ResultInterface
    TimeScore --|> AbstractScore
    PointScore --|> AbstractScore
    AbstractScore ..|> ScoreInterface
'Définitions des classes :
    'interface de généralisation pour les classes autorisé à être parié
    interface CanBeBetInterface {
        +getOdds() : float
    }
    'class BetCollection
    'Historique des paris gagnés ou perdus
    class BetHistory {
        -identifier : int
        -user : User
        -bets : Bet[*]
    }
    'Catégorie de paris (ex: Paris sur la victoire du favoris)
    class BetCategory {
        -identifier : int
        -name : string
        -description : string
    }
    'Utilisateur avec un compte
    class User {
        -identifier : int
        -password : string
        -gender : string
        -username : string
        -name : string
        -firstName : string
        -billingAddress : string
        -billingPostCode : string
        -billingCountry : string
        -birthDate : DateTime
        -emailAddress : string
        -mobile : string
        -account : Account
        -wallet : Wallet
        -cart : Cart
        -billingsHistory : BillingHistory
        -betsHistory : BetHistory
    }
    'Porte-feuille de l'utilisateur avec des fonds (de l'argent gagnés)
    class Wallet {
        -identifier : int
        -amount : float
        -user : User
    }
    'Panier qui contient les paris sélectionnés
    class Cart {
        -identifier : int
        -user : User
        -bets : Bet[*]
    }
    'Un paris ("/" <=> dérivé <=> calculé) => pour paris combiné
    class Bet {
        -identifier : int
        -amount : float
        -state : BetState
        -type : BetType
        -user : User
        -billing : Billing
        -categories : BetCategory[*]
        -/odds : float
        -items : CanBeBetInterface[*]
    }
    'Type de paris (combiné ou simple)
    'class BetType
    'Factures
    class Billing {
        -identifier : int
        -orderNumber  : int
        -amount : float
        -currency : string
        -user : User
    }
    'Historique des factures
    class BillingHistory {
        -identifier
        -user : User
        -billings : Billing[*]
    }
    'Classe mère global : Historique de quelque chose (Historique des factures)
    'class History
    'Lieu de la rencontre/course
    class Location {
        -identifier : int
        -datetime : DateTime
        -timezoneLocal : DateTimeZone
        -country : Country
        -run : Run
    }
    'Sport pratiqué
    class Sport {
        -identifier : int
        -name : string
        -individualSport : bool
        -competitorNumber : int
        -statutes : MemberStatus[*]
        -roles : MemberRole[*]
        -periods : Period[*]
        -resultsType : ResultType[*]
        -country : Country
    }
    'Pays du lieu de la rencontre/course
    class Country {
        -identifier : int
        -dateFormat : string
        -timeFormat : string
        -summerTimeOffset : int
        -TimeZones : DateTimeZone[*]
        +getIdentifier() : int
        +getDefaultTimeZone() : DateTimeZone
        +getTimeZone(in string timezone) : DateTimeZone
        +hasSummerTime() : bool
        +getDateFormat() : string
        +getTimeFormat() : string
        +getDateTimeFormat() : string
    }
    'Compétition (JO, Ligue des Champions, F1 Championnat du monde)
    class Competition {
        -identifier : int
        -name : string
        -beginAt : DateTime
        -endAt : DateTime
        -odds : float
        -sports : Sport[*]
        -betCategories : BetCategory[*]
        -teams : Team[*]
        -events : Event[*]
        -countries : Country[*]
        -result : ResultType
    }
    'Événement de la compétition (poul de qualification, Circuit F1 de france)
    class Event {
        -identifier : int
        -name : string
        -beginAt : DateTime
        -endAt : DateTime
        -odds : float
        -sports : Sport[*]
        -teams : Team[*]
        -runs : Run[*]
        -result : ResultType
    }
    'Course
    class Race {
        -identifier : int
    }
    'Rencontre
    class Fixture {
        -identifier : int
    }
    'Fuseau horraire du lieu
    'class CountryTimeZone {
    '    -identifier : int
    '    -timeZone : TimeZone
    '    -utcOffset : int
    '    +getIdentifier() : int
    '    +getTimeZone() : TimeZone
    '    +getUtcOffset() : int
    '}
    'Période du match (mi-teamps), de la course (parcour)
    class Period {
        -identifier : int
        -order : int
        -time : float
        -scores : ScoreInterface[*]
    }
    'Résultat du match, de la course
    'class Result {
    '    -identifier : int
    '    -rank : int
    '    -number : float
    '    -team : Team
    '    -member : Member
    '    -period : Period
    '}
    'Classe représentant les données servant à calculé la cote de source inconnu
    'class Score {
    '    -identifier : int
    '    -number : float
    '    -level : int
    '    -team : Team
    '    -member : Member
    '}
    'interface pour Score en temps
    interface TimeScoreInterface {
        +getTime() : float
    }
    'interface pour Score en points
    interface PointScoreInterface {
        +getPoint() : int
    }
    'interface de généralisation pour un Score
    interface ScoreInterface {
        +getScore() : mixed
    }
    'Type de Score (par période, par match, par course, par saison pour team, par épreuve pour team)
    class ScoreType {
        -identifier : int
    }
    'Score de l'équipe ou du membre de l'équipe
    abstract class AbstractScore {
        #identifier : int
        #type : ScoreType
        +getScore() : mixed
    }
    'Score en temps
    class TimeScore {
        #value : float
        +getTime() : float
    }
    'Score en points
    class PointScore {
        #value : int
        +getPoint() : int
    }
    'Classe mère global : Status de quelque chose (Status du joueur)
    'class Status
    'Status du joueur (blessé, remplaçant)
    'class MemberStatus
    'Compte de l'utilisateur (blessé, remplaçant)
    class Account {
        -identifier : int
        -validation : bool
        -status : AccountStatus
        +isValid() : bool
        +getStatus() : AccountStatus
    }
    'Status du compte (actif, invalid, valid)
    'class AccountStatus
    'Joueur ou sportif ou pilote
    class Member {
        -identifier : int
        -name : string
        -firstName : string
        -runIdentification : string
        -status : MemberStatus
        -result : ResultType
        -role : MemberRole
        -odds : float
        -sports : Sport[*]
        -teams : Team[*]
        -scores : ScoreInterface[*]
        -countries : Country[*]
    }
    'Équipes qui participe à une rencontre, à une course
    class Team {
        -identifier : int
        -name : string
        -result : ResultType
        -odds : float
        -country : Country
        -sport : Sport
        -scores : ScoreInterface[*]
        -members : Member[*]
    }
    'Statut de l'équipe ()
    'class TeamStatus
    'Classe mère global : Un match, une rencontre, une course
    abstract class AbstractRun {
        #identifier : int
        #name : string
        #beginAt : DateTime
        #endAt : DateTime
        #odds : float
        #location : Location
        #teams : Team[*]
        #members : Member[*]
        #periods : Period[*]
        #result : ResultType
    }
    'Statut du match, de la rencontre, de la course (annulé, reporté, en cours)
    'class RunStatus
    'class Value
    'class Log

@enduml
