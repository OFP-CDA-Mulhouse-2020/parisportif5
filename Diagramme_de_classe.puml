@startuml parisportif5
skinparam linetype ortho
'plantuml
'Relations :
    User --|> Account
    BetCategory "1" <-- "0..*" Bet
    User "1" -- "1" Wallet
    User "1" -- "1" Cart
    Bet "0..*" -- "0..*" Cart
    BetCategory "0..*" --> "1" Sport
    Competition "1" o-- "0..*" Event
    Competition --> Team
    Event "1" o-- "0..*" Run
    Run "1" -- "1" Location
    Team "1" o-- "0..*" Score
    Run "1" o--> "0..*" Team
    Team "1" *-- "1..*" Member
    BetTargetInterface <|.. Competition
    BetTargetInterface <|.. Event
    BetTargetInterface <|.. Run
    BetTargetInterface <|.. Team
    BetTargetInterface <|.. Member
'Définitions des classes :
    'Porte-feuille de l'utilisateur avec des fonds (de l'argent gagnés)
    class Wallet {
        -identifier : int
        -user : User
        -amount : float
        +add(in float value) : void
        +subtract(in float value) : void
        +isEmpty() : bool
        +isAuthorizedSubtraction(in float value) : bool
    }
    'Panier qui contient les paris sélectionnés
    class Cart {
        -identifier : int
        -user : User
        -betsList : Bet[*]
        +isEmpty() : bool
        +getBetsCount() : int
    }
    'interface de généralisation pour les classes autorisé à être parié
    interface BetTargetInterface {
        +getOdds() : float
    }
    'Compte (sert à ce connecter)
    class Account {
        #identifier : int
        #validation : bool
        #password : string
        #emailAddress : string
        #creationDate : DateTime
        #status : bool
        +isValidate() : bool
    }
    'Utilisateur avec un compte
    class User {
        -identifier : int
        -civility : string
        -firstName : string
        -lastName : string
        -billingAddress : string
        -billingPostCode : string
        -billingCountry : string
        -birthDate : DateTime
        -wallet : Wallet
        -cart : Cart
        +getName() : string
        +getAddress() : string
    }
    note left : Possible propriété mobile pour notification
    'Factures (type=débit ou crédit)
    class Billing {
        -identifier : int
        -user : User|null
        -firstName : string
        -lastName : string
        -billingAddress : string
        -billingPostCode : string
        -billingCountry : string
        -orderNumber  : int
        -amount : float
        -currency : string
        -type : int
        +getName() : string
        +getAddress() : string
        +deleteUser() : void
    }
    'Un paris
    class Bet {
        -identifier : int
        -amount : float
        -state : BetState
        -user : User
        -category : BetCategory
        -odds : float
        -items : BetTargetInterface
    }
    'Catégorie de paris (ex: Paris sur la victoire du favoris)
    class BetCategory {
        -identifier : int
        -name : string
        -description : string
        -sport : Sport
    }
    'Lieu de la rencontre/course
    class Location {
        -identifier : int
        -place : string
        -timezone : DateTimeZone
        -country : string
        -run : Run
    }
    'Sport pratiqué (runtype = fixture, race) (type = collectif ou individuel ou les deux)
    class Sport {
        -identifier : int
        -name : string
        -numberOfCompetitor : int
        -collectiveType : bool
        -individualType : bool
        -runType : string
        -country : string
        +isCollective() : bool
        +isIndividual() : bool
        +isBothIndividualAndCollective : bool
    }
    'Compétition (JO, Ligue des Champions, F1 Championnat du monde)
    class Competition {
        -identifier : int
        -name : string
        -startDate : DateTime
        -endDate : DateTime
        -odds : float
        -country : string
        -events : Event[*]
        -winner : Team
        +getOdds() : float
        +hasWinner() : bool
        +hasEvents() : bool
        +isBegin() : bool
        +getEventsCount() : int
    }
    'Événement de la compétition (poul de qualification, Circuit F1 de france)
    class Event {
        -identifier : int
        -name : string
        -startDate : DateTime
        -endDate : DateTime
        -odds : float
        -country : string
        -competition : Competition
        -runs : Run[*]
        +getOdds() : float
        +hasRuns() : bool
        +isBegin() : bool
        +getRunsCount() : int
    }
    'Classe mère global : Un match, une rencontre, une course
    class Run {
        -identifier : int
        -name : string
        -startDate : DateTime
        -endDate : DateTime
        -odds : float
        -location : Location
        -event : Event
        -teams : Team[*]
        -result : Team|null
        +getOdds() : float
        +isBegin() : bool
        +hasTeams() : bool
        +hasResult() : bool
        +getTeamsCount() : int
    }
    note left of Run
    Extension possible en plus de Team : "Competitor".
    Futur amélioration possible de Result en un classement.
    end note
    'Score de l'équipe ou du membre de l'équipe
    class Score {
        -identifier : int
        -value : int
        -type : string
        -team : Team
        +getScore() : int
    }
    'Joueur ou sportif ou pilote
    class Member {
        -identifier : int
        -lastName : string
        -firstName : string
        -status : MemberStatus
        -result : ResultType
        -role : MemberRole
        -odds : float
        -team : Team
        +getOdds() : float
        +hasResult() : bool
    }
    'Équipes qui participe à une rencontre, à une course
    class Team {
        -identifier : int
        -name : string
        -odds : float
        -result : ResultType
        -scores : Score[*]
        -members : Member[*]
        +getOdds() : float
        +hasResult() : bool
        +hasMembers() : bool
        +hasScores() : bool
        +getMembersCount() : int
        +getScoresCount() : int
    }
    note right: Peut implémenter une interface ContestantInterface
@enduml
